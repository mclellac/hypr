#!/bin/bash
#
# Launches a terminal-based screensaver using 'tte' (Terminal Text Effects)
# with a randomly selected visual effect. The screensaver will exit when any
# key is pressed.

set -euo pipefail

readonly BRANDING_FILE="${HOME}/.config/hypr/branding/screensaver.txt"

#######################################
# Cleans up running processes and exits the script.
# This function is called by the trap and on user input.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
exit_screensaver() {
  # Terminate any running 'tte' or screensaver terminal instances.
  pkill -x tte &>/dev/null || true
  pkill -f "alacritty --class Screensaver" &>/dev/null || true
  exit 0
}

#######################################
# Selects a random visual effect from the list provided by 'tte'.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   The name of a single, randomly chosen effect.
#######################################
get_random_effect() {
  # This pipeline is used to extract the list of available effects from
  # the 'tte' command's help text. It is fragile and may break if the
  # help output of 'tte' changes in a future version.
  tte 2>&1 |
    grep -oP '{\K[^}]+' | # Extract comma-separated list from braces
    tr ',' '\n' |         # Put each effect on a new line
    sed -n '/^beams$/,$p' | # Filter to a specific subset of effects
    sort -u |             # Sort and remove duplicates
    shuf -n 1             # Select one random effect
}

#######################################
# Main function to run the screensaver loop.
# Globals:
#   BRANDING_FILE
# Arguments:
#   None
# Outputs:
#   Exits with an error if dependencies are not met.
#######################################
main() {
  if ! command -v tte &>/dev/null; then
    echo "Error: 'tte' command not found. Please install it to use the screensaver." >&2
    exit 1
  fi

  if [[ ! -f "${BRANDING_FILE}" ]]; then
    echo "Error: Branding file not found at ${BRANDING_FILE}" >&2
    exit 1
  fi

  # Set up a trap to ensure a clean exit on common termination signals.
  trap exit_screensaver SIGINT SIGTERM SIGHUP SIGQUIT

  while true; do
    local effect
    effect=$(get_random_effect)

    # Launch the 'tte' screensaver in the background.
    # The canvas is sized to almost fill the terminal.
    tte -i "${BRANDING_FILE}" \
      --frame-rate 60 \
      --canvas-width 0 \
      --canvas-height "$(( $(tput lines) - 2 ))" \
      --anchor-canvas c \
      --anchor-text c \
      "${effect}" &

    # Wait for user input to exit.
    while pgrep -x tte &>/dev/null; do
      # 'read' waits for a single keypress with a 3-second timeout.
      if read -n 1 -t 3; then
        exit_screensaver
      fi
    done
  done
}

main "$@"
