#!/bin/bash
#
# Refreshes a user's configuration file with the default version from the
# hypr repository. It creates a timestamped backup of the user's file
# before replacing it.

set -euo pipefail

#######################################
# Prints the usage information for the script.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   Writes usage information to stdout.
#######################################
print_usage() {
  cat <<USAGE
Usage: $(basename "$0") [config_file]

Refreshes a configuration file with its default version.
The [config_file] path should be relative to ~/.config.

Example:
  To copy ~/.local/share/hypr/config/hypr/hyprlock.conf to ~/.config/hypr/hyprlock.conf:
  $(basename "$0") hypr/hyprlock.conf
USAGE
}

#######################################
# Main function to refresh the configuration file.
# Globals:
#   HOME - The user's home directory.
# Arguments:
#   $1 - The path to the configuration file, relative to ~/.config.
# Outputs:
#   Exits with an error if the config file argument is missing.
#######################################
main() {
  local config_file="${1:-}"
  if [[ -z "${config_file}" ]]; then
    print_usage
    exit 1
  fi

  local user_config_file="${HOME}/.config/${config_file}"
  local default_config_file="${HOME}/.local/share/hypr/config/${config_file}"
  local backup_config_file="${user_config_file}.bak.$(date +%s)"

  if [[ ! -f "${default_config_file}" ]]; then
      echo "Error: Default config file not found: ${default_config_file}" >&2
      exit 1
  fi

  if [[ -f "${user_config_file}" ]]; then
    # Create a backup of the user's existing config file.
    cp -f "${user_config_file}" "${backup_config_file}"

    # Replace the user's config with the new default.
    cp -f "${default_config_file}" "${user_config_file}"

    # If the files are identical, the backup is unnecessary.
    if cmp -s "${user_config_file}" "${backup_config_file}"; then
      rm "${backup_config_file}"
    else
      echo -e "\e[31mReplaced ${user_config_file} with new hypr default."
      echo -e "Saved backup as ${backup_config_file}.\n\n\e[32mChanges:\e[0m"
      diff "${backup_config_file}" "${user_config_file}" || true
    fi
  else
    # If the user's config file doesn't exist, just copy the default.
    echo "Creating new config file: ${user_config_file}"
    mkdir -p "$(dirname "${user_config_file}")"
    cp -f "${default_config_file}" "${user_config_file}"
  fi
}

main "$@"
