#!/bin/bash
#
# Manages system snapshots using 'snapper'. It supports creating new
# snapshots and restoring existing ones.

set -euo pipefail

#######################################
# Creates a new system snapshot for all configured snapper configs.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
create_snapshot() {
  local description
  description="$(hypr-version)"

  echo -e "\e[32mCreating system snapshot with description: ${description}\e[0m"

  # Get existing snapper config names from CSV output.
  local -a configs
  mapfile -t configs < <(sudo snapper --csvout list-configs | awk -F, 'NR>1 {print $1}')

  for config in "${configs[@]}"; do
    echo "Creating snapshot for config: ${config}"
    sudo snapper -c "${config}" create -c number -d "${description}"
  done
  echo
}

#######################################
# Restores the system from a snapshot.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
restore_snapshot() {
  echo -e "\e[32mRestoring system from snapshot...\e[0m"
  sudo limine-snapper-restore
}

#######################################
# Main function to drive the script.
# Globals:
#   None
# Arguments:
#   $1 - The command to execute (create|restore).
# Outputs:
#   Exits with an error if the command is missing or invalid, or if snapper is not installed.
#######################################
main() {
  local command="${1:-}"
  if [[ -z "${command}" ]]; then
    echo "Usage: $(basename "$0") <create|restore>" >&2
    exit 1
  fi

  if ! command -v snapper &>/dev/null; then
    # Exit with a specific code that can be checked by other scripts.
    exit 127
  fi

  case "${command}" in
  create)
    create_snapshot
    ;;
  restore)
    restore_snapshot
    ;;
  *)
    echo "Error: Invalid command '${command}'. Use 'create' or 'restore'." >&2
    exit 1
    ;;
  esac
}

main "$@"
