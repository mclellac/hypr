#!/bin/bash
#
# Sets up various development environments using 'mise' for version management
# and system package managers for other dependencies.

set -euo pipefail

#######################################
# Installs PHP and its common extensions using pacman and sed.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
InstallPhp() {
  echo "Installing PHP and related dependencies..."
  sudo pacman -S --noconfirm --needed php composer php-sqlite

  if ! grep -q 'composer/vendor/bin' "${HOME}/.bashrc"; then
    echo "Adding Composer's global bin directory to PATH in ~/.bashrc..."
    echo 'export PATH="$HOME/.config/composer/vendor/bin:$PATH"' >>"${HOME}/.bashrc"
    echo "Please start a new terminal session for this change to take effect."
  fi

  echo "Enabling core PHP extensions in php.ini..."
  local php_ini_path="/etc/php/php.ini"
  local extensions=("bcmath" "intl" "iconv" "openssl" "pdo_sqlite" "pdo_mysql")
  for ext in "${extensions[@]}"; do
    if grep -q "^;extension=${ext}" "${php_ini_path}"; then
      sudo sed -i "s/^;extension=${ext}/extension=${ext}/" "${php_ini_path}"
    fi
  done
}

#######################################
# Installs Node.js (LTS) using mise.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
InstallNode() {
  echo "Installing Node.js (LTS)..."
  mise use --global node@lts
}

#######################################
# Installs a specific development tool using mise.
# Globals:
#   None
# Arguments:
#   $1 - The name of the tool for display purposes (e.g., "Ruby").
#   $2 - The mise tool name and version (e.g., "ruby@latest").
# Outputs:
#   None
#######################################
InstallWithMise() {
  local name="$1"
  local tool_version="$2"
  echo "Installing ${name}..."
  mise use --global "${tool_version}"
}

#######################################
# Main function to parse arguments and run installations.
# Globals:
#   None
# Arguments:
#   $1 - The development environment to install.
# Outputs:
#   Exits with an error if dependencies are missing or an unknown env is specified.
#######################################
main() {
  if ! command -v mise &>/dev/null; then
    echo "Error: 'mise' command not found. Please install it first." >&2
    exit 1
  fi

  local env_target="${1:-}"
  if [[ -z "${env_target}" ]]; then
    echo "Usage: $(basename "$0") <ruby|node|bun|go|laravel|symfony|php|python|elixir|phoenix|rust|java|ocaml|dotnet>" >&2
    exit 1
  fi

  case "${env_target}" in
  ruby)
    InstallWithMise "Ruby" "ruby@latest"
    echo "Installing Rails gem..."
    mise x ruby -- gem install rails --no-document
    ;;
  node)
    InstallNode
    ;;
  bun)
    InstallWithMise "Bun" "bun@latest"
    ;;
  deno)
    InstallWithMise "Deno" "deno@latest"
    ;;
  go)
    InstallWithMise "Go" "go@latest"
    ;;
  php)
    InstallPhp
    ;;
  laravel)
    InstallPhp
    InstallNode
    echo "Installing Laravel installer via Composer..."
    composer global require laravel/installer
    ;;
  symfony)
    InstallPhp
    echo "Installing Symfony CLI..."
    hypr-pkg-add symfony-cli
    ;;
  python)
    InstallWithMise "Python" "python@latest"
    echo "Installing uv package manager..."
    curl -fsSL https://astral.sh/uv/install.sh | sh
    ;;
  elixir)
    InstallWithMise "Erlang" "erlang@latest"
    InstallWithMise "Elixir" "elixir@latest"
    echo "Running mix local.hex..."
    mise x elixir -- mix local.hex --force
    ;;
  phoenix)
    InstallWithMise "Erlang" "erlang@latest"
    InstallWithMise "Elixir" "elixir@latest"
    echo "Running mix local.hex and local.rebar..."
    mise x elixir -- mix local.hex --force
    mise x elixir -- mix local.rebar --force
    echo "Installing Phoenix installer..."
    mise x elixir -- mix archive.install hex phx_new --force
    ;;
  rust)
    echo "Installing Rust via rustup..."
    bash -c "$(curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs)" -- -y
    ;;
  java)
    InstallWithMise "Java" "java@latest"
    ;;
  zig)
    InstallWithMise "Zig" "zig@latest"
    ;;
  ocaml)
    echo "Installing OCaml via opam..."
    bash -c "$(curl -fsSL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)"
    opam init --yes
    eval "$(opam env)"
    opam install ocaml-lsp-server odoc ocamlformat utop --yes
    ;;
  dotnet)
    InstallWithMise ".NET" "dotnet@latest"
    ;;
  *)
    echo "Error: Unknown development environment '${env_target}'" >&2
    exit 1
    ;;
  esac

  echo -e "\nInstallation for '${env_target}' complete."
}

main "$@"