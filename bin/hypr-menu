#!/bin/bash
#
# Provides a collection of dmenu-style menus for managing the Hyprland environment,
# including theme selection, application launching, and system controls.

set -euo pipefail

#######################################
# Displays a dmenu-style menu using walker.
# Globals:
#   None
# Arguments:
#   $1 - The prompt to display.
#   $2 - A newline-separated string of options.
#   $3 - (Optional) Extra arguments to pass to walker.
#   $4 - (Optional) The option to pre-select.
# Outputs:
#   The selected option from the menu.
#######################################
Menu() {
  local prompt="$1"
  local options="$2"
  local extra_args_str="${3:-}"
  local preselect="${4:-}"
  local -a args

  # shellcheck disable=SC2206
  args=($extra_args_str)

  if [[ -n "${preselect}" ]]; then
    local index
    # The `grep` command gets the line number of the pre-selected option.
    # The `cut` command extracts the line number.
    index=$(echo -e "${options}" | grep -nxF "${preselect}" | cut -d: -f1)
    if [[ -n "${index}" ]]; then
      # walker uses a zero-based index for pre-selection.
      args+=("-c" "$((index - 1))")
    fi
  fi

  # The `walker` command displays the dmenu.
  echo -e "${options}" | walker --dmenu -p "${prompt}…" "${args[@]}"
}

#######################################
# Launches a command in a new Alacritty terminal window.
# Globals:
#   None
# Arguments:
#   $@ - The command and its arguments to execute.
# Outputs:
#   None
#######################################
Terminal() {
  alacritty --class hypr -e "$@"
}

#######################################
# Launches a command in a floating terminal for presentations.
# Globals:
#   None
# Arguments:
#   $1 - The command to execute.
# Outputs:
#   None
#######################################
PresentTerminal() {
  hypr-launch-floating-terminal-with-presentation "$1"
}

#######################################
# Opens a file for editing in Neovim within a new terminal window.
# Globals:
#   None
# Arguments:
#   $1 - The path to the file to edit.
# Outputs:
#   None
#######################################
EditInNvim() {
  notify-send "Editing config file" "$1"
  alacritty -e nvim "$1"
}

#######################################
# Installs a package using pacman.
# Globals:
#   None
# Arguments:
#   $1 - The name of the package for display purposes.
#   $2 - The package name to pass to pacman.
# Outputs:
#   None
#######################################
Install() {
  PresentTerminal "echo 'Installing $1...'; sudo pacman -S --noconfirm $2"
}

#######################################
# Installs a package and launches it.
# Globals:
#   None
# Arguments:
#   $1 - The name of the application for display purposes.
#   $2 - The package name to pass to pacman.
#   $3 - The desktop file name to launch.
# Outputs:
#   None
#######################################
InstallAndLaunch() {
  PresentTerminal "echo 'Installing $1...'; sudo pacman -S --noconfirm $2 && setsid gtk-launch $3"
}

#######################################
# Installs a font and sets it as the current font.
# Globals:
#   None
# Arguments:
#   $1 - The name of the font for display purposes.
#   $2 - The package name of the font.
#   $3 - The full name of the font to be set.
# Outputs:
#   None
#######################################
InstallFont() {
  PresentTerminal "echo 'Installing $1...'; sudo pacman -S --noconfirm --needed $2 && sleep 2 && hypr-font-set '$3'"
}

#######################################
# Installs a package from the AUR using yay.
# Globals:
#   None
# Arguments:
#   $1 - The name of the package for display purposes.
#   $2 - The package name to pass to yay.
# Outputs:
#   None
#######################################
AurInstall() {
  PresentTerminal "echo 'Installing $1 from AUR...'; yay -S --noconfirm $2"
}

#######################################
# Installs a package from the AUR and launches it.
# Globals:
#   None
# Arguments:
#   $1 - The name of the application for display purposes.
#   $2 - The package name to pass to yay.
#   $3 - The desktop file name to launch.
# Outputs:
#   None
#######################################
AurInstallAndLaunch() {
  PresentTerminal "echo 'Installing $1 from AUR...'; yay -S --noconfirm $2 && setsid gtk-launch $3"
}

#######################################
# Displays a menu for work-related web applications.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowWorkMenu() {
  local options="󰔾  Akamai\n  Jira\n  GitLab\n  Bitbucket\n  Confluence\n  Bamboo\n  OpenShift Internal\n  OpenShift Prod\n  Gmail\n  Google Calendar\n 5736 AWS\n 1300 AWS"
  local choice
  choice=$(Menu "Work" "${options}")

  case "${choice}" in
    *"Akamai"*) hypr-launch-webapp "https://control.akamai.com" ;;
    *"Jira"*) hypr-launch-webapp "https://cbc-digital.atlassian.net/jira/dashboards/10092" ;;
    *"GitLab"*) hypr-launch-webapp "https://gitlab.nm.cbc.ca" ;;
    *"Bitbucket"*) hypr-launch-webapp "https://bitbucket.org/cbc-digital/workspace/overview" ;;
    *"Confluence"*) hypr-launch-webapp "https://cbc-digital.atlassian.net/wiki/spaces/~McLellac/" ;;
    *"Bamboo"*) hypr-launch-webapp "https://bamboo.nm.cbc.ca" ;;
    *"Internal"*) hypr-launch-webapp "https://console-openshift-console.apps.ocp.int.nm.cbc.ca/" ;;
    *"Prod"*) hypr-launch-webapp "https://console-openshift-console.apps.ocp.nm.cbc.ca/" ;;
    *"Gmail"*) hypr-launch-webapp "https://gmail.com" ;;
    *"Calendar"*) hypr-launch-webapp "https://calendar.google.com" ;;
    *"5736 AWS"*) hypr-launch-webapp "https://573618582034.signin.aws.amazon.com/console/" ;;
    *"1300 AWS"*) hypr-launch-webapp "https://130084070345.signin.aws.amazon.com/console/" ;;
    *) ShowMainMenu ;;
  esac
}

#######################################
# Displays a menu for online development resources.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowResourcesMenu() {
  local options="󰣇  Arch\n  Keybindings\n󰅛  OWASP Cheats\n  Web Attack Cheats\n󰎑  PayloadAllTheThings\n󱆃  HackTricks\n  Exploit DB\n  GTFOBins\n󰯁  LOLBAS\n󱎴  PEASS\n󱫋  SecLists\n󰢩  Reverse Shells\n󰲊  Pentest Monkey Cheats"
  local choice
  choice=$(Menu "Resources" "${options}")

  case "${choice}" in
    *"Arch"*) hypr-launch-webapp "https://wiki.archlinux.org/title/Main_page" ;;
    *"Keybindings"*) hypr-menu-keybindings ;;
    *"OWASP"*) hypr-launch-webapp "https://cheatsheetseries.owasp.org/index.html" ;;
    *"Web"*) hypr-launch-webapp "https://github.com/riramar/Web-Attack-Cheat-Sheet" ;;
    *"PayloadsAllTheThings"*) hypr-launch-webapp "https://github.com/swisskyrepo/PayloadsAllTheThings" ;;
    *"HackTricks"*) hypr-launch-webapp "https://book.hacktricks.xyz" ;;
    *"Exploit DB"*) hypr-launch-webapp "https://www.exploit-db.com" ;;
    *"GTFOBins"*) hypr-launch-webapp "https://gtfobins.github.io" ;;
    *"LOLBAS"*) hypr-launch-webapp "https://lolbas-project.github.io" ;;
    *"PEASS"*) hypr-launch-webapp "https://github.com/peass-ng/PEASS-ng" ;;
    *"SecLists"*) hypr-launch-webapp "https://github.com/danielmiessler/SecLists" ;;
    *"Reverse Shells"*) hypr-launch-webapp "https://www.revshells.com/" ;;
    *"Pentest Monkey Cheats"*) hypr-launch-webapp "https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet" ;;
    *) ShowMainMenu ;;
  esac
}

#######################################
# Displays a menu for managing visual styles.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowStyleMenu() {
  local options="󰸌  Theme\n  Font\n  Background\n󱄄  Screensaver\n  About"
  local choice
  choice=$(Menu "Style" "${options}")

  case "${choice}" in
    *"Theme"*) ShowThemeMenu ;;
    *"Font"*) ShowFontMenu ;;
    *"Background"*) hypr-theme-bg-next ;;
    *"Screensaver"*) EditInNvim ~/.config/hypr/branding/screensaver.txt ;;
    *"About"*) EditInNvim ~/.config/hypr/branding/about.txt ;;
    *) ShowMainMenu ;;
  esac
}

#######################################
# Displays a menu for selecting and applying a new theme.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowThemeMenu() {
  local theme
  theme=$(Menu "Theme" "$(hypr-theme-list)" "" "$(hypr-theme-current)")
  if [[ "${theme}" != "CNCLD" && -n "${theme}" ]]; then
    hypr-theme-set "${theme}"
  else
    ShowMainMenu
  fi
}

#######################################
# Displays a menu for selecting and applying a new font.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowFontMenu() {
  local font
  font=$(Menu "Font" "$(hypr-font-list)" "--width 350" "$(hypr-font-current)")
  if [[ "${font}" != "CNCLD" && -n "${font}" ]]; then
    hypr-font-set "${font}"
  else
    ShowMainMenu
  fi
}

#######################################
# Displays a menu for screen capture options.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowCaptureMenu() {
  local options="  Screenshot\n  Screenrecord\n󰃉  Color"
  local choice
  choice=$(Menu "Capture" "${options}")

  case "${choice}" in
    *"Screenshot"*) ShowScreenshotMenu ;;
    *"Screenrecord"*) ShowScreenrecordMenu ;;
    *"Color"*) pkill hyprpicker || hyprpicker -a ;;
    *) ShowMainMenu ;;
  esac
}

#######################################
# Displays a menu for different screenshot modes.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowScreenshotMenu() {
  local options="  Region\n  Window\n  Display"
  local choice
  choice=$(Menu "Screenshot" "${options}")

  case "${choice}" in
    *"Region"*) hypr-cmd-screenshot ;;
    *"Window"*) hypr-cmd-screenshot window ;;
    *"Display"*) hypr-cmd-screenshot output ;;
    *) ShowCaptureMenu ;;
  esac
}

#######################################
# Displays a menu for different screen recording modes.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowScreenrecordMenu() {
  local options="  Region\n  Display"
  local choice
  choice=$(Menu "Screenrecord" "${options}")

  case "${choice}" in
    *"Region"*) hypr-cmd-screenrecord ;;
    *"Display"*) hypr-cmd-screenrecord output ;;
    *) ShowCaptureMenu ;;
  esac
}

#######################################
# Displays a menu for toggling system features.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowToggleMenu() {
  local options="󱄄  Screensaver\n󰔎  Nightlight\n󱫖  Idle Lock\n󰍜  Top Bar"
  local choice
  choice=$(Menu "Toggle" "${options}")

  case "${choice}" in
    *"Screensaver"*) hypr-toggle-screensaver ;;
    *"Nightlight"*) hypr-toggle-nightlight ;;
    *"Idle"*) hypr-toggle-idle ;;
    *"Bar"*) hypr-toggle-waybar ;;
    *) ShowMainMenu ;;
  esac
}

#######################################
# Displays a menu for system setup and configuration.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowSetupMenu() {
  local options="  Audio\n  Wifi\n󰂯  Bluetooth\n󱐋  Power Profile\n󰍹  Monitors"
  if [[ -f ~/.config/hypr/bindings.conf ]]; then
    options+="\n  Keybindings"
  fi
  if [[ -f ~/.config/hypr/input.conf ]]; then
    options+="\n  Input"
  fi
  options+="\n󰱔  DNS\n  Config\n󰈷  Fingerprint\n  Fido2"

  local choice
  choice=$(Menu "Setup" "${options}")

  case "${choice}" in
    *"Audio"*) alacritty --class=Wiremix -e wiremix ;;
    *"Wifi"*)
      rfkill unblock wifi
      alacritty --class=Impala -e impala
      ;;
    *"Bluetooth"*)
      rfkill unblock bluetooth
      blueberry
      ;;
    *"Power"*) ShowSetupPowerMenu ;;
    *"Monitors"*) EditInNvim ~/.config/hypr/monitors.conf ;;
    *"Keybindings"*) EditInNvim ~/.config/hypr/bindings.conf ;;
    *"Input"*) EditInNvim ~/.config/hypr/input.conf ;;
    *"DNS"*) PresentTerminal "hypr-setup-dns" ;;
    *"Config"*) ShowSetupConfigMenu ;;
    *"Fingerprint"*) PresentTerminal "hypr-setup-fingerprint" ;;
    *"Fido2"*) PresentTerminal "hypr-setup-fido2" ;;
    *) ShowMainMenu ;;
  esac
}

#######################################
# Displays a menu for setting the power profile.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowSetupPowerMenu() {
  local profile
  profile=$(Menu "Power Profile" "$(hypr-powerprofiles-list)" "" "$(powerprofilesctl get)")

  if [[ "${profile}" != "CNCLD" && -n "${profile}" ]]; then
    powerprofilesctl set "${profile}"
  else
    ShowMainMenu
  fi
}

#######################################
# Displays a menu for editing application configuration files.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowSetupConfigMenu() {
  local options="  Hyprland\n  Hypridle\n  Hyprlock\n  Hyprsunset\n  Swayosd\n󰌧  Walker\n󰍜  Waybar\n󰞅  XCompose"
  local choice
  choice=$(Menu "Setup" "${options}")

  case "${choice}" in
    *"Hyprland"*) EditInNvim ~/.config/hypr/hyprland.conf ;;
    *"Hypridle"*)
      EditInNvim ~/.config/hypr/hypridle.conf
      hypr-restart-hypridle
      ;;
    *"Hyprlock"*) EditInNvim ~/.config/hypr/hyprlock.conf ;;
    *"Hyprsunset"*)
      EditInNvim ~/.config/hypr/hyprsunset.conf
      hypr-restart-hyprsunset
      ;;
    *"Swayosd"*)
      EditInNvim ~/.config/swayosd/config.toml
      hypr-restart-swayosd
      ;;
    *"Walker"*)
      EditInNvim ~/.config/walker/config.toml
      hypr-restart-walker
      ;;
    *"Waybar"*)
      EditInNvim ~/.config/waybar/config.jsonc
      hypr-restart-waybar
      ;;
    *"XCompose"*)
      EditInNvim ~/.XCompose
      hypr-restart-xcompose
      ;;
    *) ShowMainMenu ;;
  esac
}

#######################################
# Displays the main installation menu.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowInstallMenu() {
  local options="󰣇  Package\n󰣇  AUR\n  Web App\n  TUI\n  Service\n  Style\n󰵮  Development\n  Editor\n󱚤  AI\n  Gaming"
  local choice
  choice=$(Menu "Install" "${options}")

  case "${choice}" in
    *"Package"*) Terminal "hypr-pkg-install" ;;
    *"AUR"*) Terminal "hypr-pkg-aur-install" ;;
    *"Web"*) PresentTerminal "hypr-webapp-install" ;;
    *"TUI"*) PresentTerminal "hypr-tui-install" ;;
    *"Service"*) ShowInstallServiceMenu ;;
    *"Style"*) ShowInstallStyleMenu ;;
    *"Development"*) ShowInstallDevelopmentMenu ;;
    *"Editor"*) ShowInstallEditorMenu ;;
    *"AI"*) ShowInstallAiMenu ;;
    *"Gaming"*) ShowInstallGamingMenu ;;
    *) ShowMainMenu ;;
  esac
}

#######################################
# Displays a menu for installing system services.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowInstallServiceMenu() {
  local options="  Dropbox\n  Tailscale\n󰟵  Bitwarden"
  local choice
  choice=$(Menu "Install" "${options}")

  case "${choice}" in
    *"Dropbox"*) PresentTerminal "hypr-install-dropbox" ;;
    *"Tailscale"*) PresentTerminal "hypr-install-tailscale" ;;
    *"Bitwarden"*) InstallAndLaunch "Bitwarden" "bitwarden bitwarden-cli" "bitwarden" ;;
    *) ShowInstallMenu ;;
  esac
}

#######################################
# Displays a menu for installing text editors.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowInstallEditorMenu() {
  local options="  VSCode\n  Cursor\n  Zed\n  Sublime Text\n  Helix\n  Emacs"
  local choice
  choice=$(Menu "Install" "${options}")

  case "${choice}" in
    *"VSCode"*) InstallAndLaunch "VSCode" "visual-studio-code-bin" "code" ;;
    *"Cursor"*) InstallAndLaunch "Cursor" "cursor-bin" "cursor" ;;
    *"Zed"*) InstallAndLaunch "Zed" "zed" "dev.zed.Zed" ;;
    *"Sublime"*) AurInstallAndLaunch "Sublime Text" "sublime-text-4" "sublime_text" ;;
    *"Helix"*) Install "Helix" "helix" ;;
    *"Emacs"*)
      Install "Emacs" "emacs-wayland"
      systemctl --user enable --now emacs.service
      ;;
    *) ShowInstallMenu ;;
  esac
}

#######################################
# Displays a menu for installing AI and machine learning tools.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowInstallAiMenu() {
  local ollama_pkg="ollama"
  if command -v nvidia-smi &>/dev/null; then
    ollama_pkg="ollama-cuda"
  elif command -v rocminfo &>/dev/null; then
    ollama_pkg="ollama-rocm"
  fi

  local options="󱚤  Claude Code\n󱚤  Gemini\n󱚤  OpenAI Codex [AUR]\n󱚤  LM Studio\n󱚤  Ollama\n󱚤  Crush\n󱚤  opencode"
  local choice
  choice=$(Menu "Install" "${options}")

  case "${choice}" in
    *"Claude"*) Install "Claude Code" "claude-code" ;;
    *"OpenAI"*) AurInstall "OpenAI Codex" "openai-codex-bin" ;;
    *"Gemini"*) Install "Gemini" "gemini-cli" ;;
    *"Studio"*) Install "LM Studio" "lmstudio" ;;
    *"Ollama"*) Install "Ollama" "${ollama_pkg}" ;;
    *"Crush"*) Install "Crush" "crush-bin" ;;
    *"opencode"*) Install "opencode" "opencode-bin" ;;
    *) ShowInstallMenu ;;
  esac
}

#######################################
# Displays a menu for installing gaming-related applications.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowInstallGamingMenu() {
  local options="  Steam\n  RetroArch [AUR]\n󰍳  Minecraft"
  local choice
  choice=$(Menu "Install" "${options}")

  case "${choice}" in
    *"Steam"*) PresentTerminal "hypr-install-steam" ;;
    *"RetroArch"*) AurInstallAndLaunch "RetroArch" "retroarch retroarch-assets libretro libretro-fbneo" "com.libretro.RetroArch.desktop" ;;
    *"Minecraft"*) InstallAndLaunch "Minecraft" "minecraft-launcher" "minecraft-launcher" ;;
    *) ShowInstallMenu ;;
  esac
}

#######################################
# Displays a menu for installing style-related assets like themes and fonts.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowInstallStyleMenu() {
  local options="󰸌  Theme\n  Background\n  Font"
  local choice
  choice=$(Menu "Install" "${options}")

  case "${choice}" in
    *"Theme"*) PresentTerminal "hypr-theme-install" ;;
    *"Background"*) nautilus ~/.config/hypr/current/theme/backgrounds ;;
    *"Font"*) ShowInstallFontMenu ;;
    *) ShowInstallMenu ;;
  esac
}

#######################################
# Displays a menu for installing different fonts.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowInstallFontMenu() {
  local options="  Meslo LG Mono\n  Fira Code\n  Victor Code\n  Bistream Vera Mono"
  local choice
  choice=$(Menu "Install" "${options}" "-w 350")

  case "${choice}" in
    *"Meslo"*) InstallFont "Meslo LG Mono" "ttf-meslo-nerd" "MesloLGL Nerd Font" ;;
    *"Fira"*) InstallFont "Fira Code" "ttf-firacode-nerd" "FiraCode Nerd Font" ;;
    *"Victor"*) InstallFont "Victor Code" "ttf-victor-mono-nerd" "VictorMono Nerd Font" ;;
    *"Bistream"*) InstallFont "Bistream Vera Code" "ttf-bitstream-vera-mono-nerd" "BitstromWera Nerd Font" ;;
    *) ShowInstallMenu ;;
  esac
}

#######################################
# Displays a menu for installing development environments.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowInstallDevelopmentMenu() {
  local options="󰫏  Ruby on Rails\n  Docker DB\n  JavaScript\n  Go\n  PHP\n  Python\n  Elixir\n  Zig\n  Rust\n  Java\n  .NET\n  OCaml"
  local choice
  choice=$(Menu "Install" "${options}")

  case "${choice}" in
    *"Rails"*) PresentTerminal "hypr-install-dev-env ruby" ;;
    *"Docker"*) PresentTerminal "hypr-install-docker-dbs" ;;
    *"JavaScript"*) ShowInstallJavascriptMenu ;;
    *"Go"*) PresentTerminal "hypr-install-dev-env go" ;;
    *"PHP"*) ShowInstallPhpMenu ;;
    *"Python"*) PresentTerminal "hypr-install-dev-env python" ;;
    *"Elixir"*) ShowInstallElixirMenu ;;
    *"Zig"*) PresentTerminal "hypr-install-dev-env zig" ;;
    *"Rust"*) PresentTerminal "hypr-install-dev-env rust" ;;
    *"Java"*) PresentTerminal "hypr-install-dev-env java" ;;
    *".NET"*) PresentTerminal "hypr-install-dev-env dotnet" ;;
    *"OCaml"*) PresentTerminal "hypr-install-dev-env ocaml" ;;
    *) ShowInstallMenu ;;
  esac
}

#######################################
# Displays a menu for installing JavaScript runtimes.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowInstallJavascriptMenu() {
  local options="  Node.js\n  Bun\n  Deno"
  local choice
  choice=$(Menu "Install" "${options}")

  case "${choice}" in
    *"Node"*) PresentTerminal "hypr-install-dev-env node" ;;
    *"Bun"*) PresentTerminal "hypr-install-dev-env bun" ;;
    *"Deno"*) PresentTerminal "hypr-install-dev-env deno" ;;
    *) ShowInstallDevelopmentMenu ;;
  esac
}

#######################################
# Displays a menu for installing PHP frameworks.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowInstallPhpMenu() {
  local options="  PHP\n  Laravel\n  Symfony"
  local choice
  choice=$(Menu "Install" "${options}")

  case "${choice}" in
    *"PHP"*) PresentTerminal "hypr-install-dev-env php" ;;
    *"Laravel"*) PresentTerminal "hypr-install-dev-env laravel" ;;
    *"Symfony"*) PresentTerminal "hypr-install-dev-env symfony" ;;
    *) ShowInstallDevelopmentMenu ;;
  esac
}

#######################################
# Displays a menu for installing Elixir frameworks.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowInstallElixirMenu() {
  local options="  Elixir\n  Phoenix"
  local choice
  choice=$(Menu "Install" "${options}")

  case "${choice}" in
    *"Elixir"*) PresentTerminal "hypr-install-dev-env elixir" ;;
    *"Phoenix"*) PresentTerminal "hypr-install-dev-env phoenix" ;;
    *) ShowInstallDevelopmentMenu ;;
  esac
}

#######################################
# Displays a menu for removing software and configurations.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowRemoveMenu() {
  local options="󰣇  Package\n  Web App\n  TUI\n󰸌  Theme\n󰈷  Fingerprint\n  Fido2"
  local choice
  choice=$(Menu "Remove" "${options}")

  case "${choice}" in
    *"Package"*) Terminal "hypr-pkg-remove" ;;
    *"Web"*) PresentTerminal "hypr-webapp-remove" ;;
    *"TUI"*) PresentTerminal "hypr-tui-remove" ;;
    *"Theme"*) PresentTerminal "hypr-theme-remove" ;;
    *"Fingerprint"*) PresentTerminal "hypr-setup-fingerprint --remove" ;;
    *"Fido2"*) PresentTerminal "hypr-setup-fido2 --remove" ;;
    *) ShowMainMenu ;;
  esac
}

#######################################
# Displays the main update menu.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowUpdateMenu() {
  local options=" hypr\n  Config\n󰸌  Themes\n  Process\n󰇅  Hardware\n  Timezone"
  local choice
  choice=$(Menu "Update" "${options}")

  case "${choice}" in
    *"hypr"*) PresentTerminal "hypr-update" ;;
    *"Config"*) ShowUpdateConfigMenu ;;
    *"Themes"*) PresentTerminal "hypr-theme-update" ;;
    *"Process"*) ShowUpdateProcessMenu ;;
    *"Hardware"*) ShowUpdateHardwareMenu ;;
    *"Timezone"*) hypr-cmd-tzupdate ;;
    *) ShowMainMenu ;;
  esac
}

#######################################
# Displays a menu for restarting system processes.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowUpdateProcessMenu() {
  local options="  Hypridle\n  Hyprsunset\n  Swayosd\n󰌧  Walker\n󰍜  Waybar"
  local choice
  choice=$(Menu "Restart" "${options}")

  case "${choice}" in
    *"Hypridle"*) hypr-restart-hypridle ;;
    *"Hyprsunset"*) hypr-restart-hyprsunset ;;
    *"Swayosd"*) hypr-restart-swayosd ;;
    *"Walker"*) hypr-restart-walker ;;
    *"Waybar"*) hypr-restart-waybar ;;
    *) ShowUpdateMenu ;;
  esac
}

#######################################
# Displays a menu for restoring default configurations.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowUpdateConfigMenu() {
  local options="  Hyprland\n  Hypridle\n  Hyprlock\n  Hyprsunset\n󱣴  Plymouth\n  Swayosd\n󰌧  Walker\n󰍜  Waybar"
  local choice
  choice=$(Menu "Use default config" "${options}")

  case "${choice}" in
    *"Hyprland"*) PresentTerminal "hypr-refresh-hyprland" ;;
    *"Hypridle"*) PresentTerminal "hypr-refresh-hypridle" ;;
    *"Hyprlock"*) PresentTerminal "hypr-refresh-hyprlock" ;;
    *"Hyprsunset"*) PresentTerminal "hypr-refresh-hyprsunset" ;;
    *"Plymouth"*) PresentTerminal "hypr-refresh-plymouth" ;;
    *"Swayosd"*) PresentTerminal "hypr-refresh-swayosd" ;;
    *"Walker"*) PresentTerminal "hypr-refresh-walker" ;;
    *"Waybar"*) PresentTerminal "hypr-refresh-waybar" ;;
    *) ShowUpdateMenu ;;
  esac
}

#######################################
# Displays a menu for restarting hardware-related services.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowUpdateHardwareMenu() {
  local options="󱚾  Wi-Fi\n󰂯  Bluetooth"
  local choice
  choice=$(Menu "Restart" "${options}")

  case "${choice}" in
    *"Wi-Fi"*) PresentTerminal "hypr-restart-wifi" ;;
    *"Bluetooth"*) PresentTerminal "hypr-restart-bluetooth" ;;
    *) ShowUpdateMenu ;;
  esac
}

#######################################
# Displays a menu for system-level power options.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowSystemMenu() {
  local options="  Lock\n󱄄  Screensaver\n󰤄  Suspend\n  Relaunch\n󰜉  Restart\n󰐥  Shutdown"
  local choice
  choice=$(Menu "System" "${options}")

  case "${choice}" in
    *"Lock"*) hypr-lock-screen ;;
    *"Screensaver"*) hypr-launch-screensaver force ;;
    *"Suspend"*) systemctl suspend ;;
    *"Relaunch"*) uwsm stop ;;
    *"Restart"*) systemctl reboot ;;
    *"Shutdown"*) systemctl poweroff ;;
    *) ShowMainMenu ;;
  esac
}

#######################################
# Displays the main navigation menu.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ShowMainMenu() {
  local options="󰀻  Apps\n󱃐  Work\n󰧑  Resources\n  Capture\n󰔎  Toggle\n  Style\n  Setup\n󰉉  Install\n󰭌  Remove\n  Update\n  About\n  System"
  GoToMenu "$(Menu "Go" "${options}")"
}

#######################################
# Navigates to a specific menu based on user selection.
# Globals:
#   None
# Arguments:
#   $1 - The menu to navigate to.
# Outputs:
#   None
#######################################
GoToMenu() {
  local selection="${1,,}"
  case "${selection}" in
    *"apps"*) walker --provider desktopapplications -p "Launch…" ;;
    *"work"*) ShowWorkMenu ;;
    *"resources"*) ShowResourcesMenu ;;
    *"style"*) ShowStyleMenu ;;
    *"theme"*) ShowThemeMenu ;;
    *"capture"*) ShowCaptureMenu ;;
    *"screenshot"*) ShowScreenshotMenu ;;
    *"screenrecord"*) ShowScreenrecordMenu ;;
    *"toggle"*) ShowToggleMenu ;;
    *"setup"*) ShowSetupMenu ;;
    *"power"*) ShowSetupPowerMenu ;;
    *"install"*) ShowInstallMenu ;;
    *"remove"*) ShowRemoveMenu ;;
    *"update"*) ShowUpdateMenu ;;
    *"about"*) alacritty --class hypr -o font.size=9 -e bash -c 'fastfetch; read -n 1 -s' ;;
    *"system"*) ShowSystemMenu ;;
  esac
}

#######################################
# Main function to run the script.
# Globals:
#   None
# Arguments:
#   $@ - The script arguments.
# Outputs:
#   None
#######################################
main() {
  export PATH="$HOME/.local/share/hypr/bin:$PATH"

  if [[ -n "${1:-}" ]]; then
    GoToMenu "$1"
  else
    ShowMainMenu
  fi
}

main "$@"