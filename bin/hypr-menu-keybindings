#!/bin/bash
#
# Displays a searchable menu of Hyprland keybindings using 'walker'.
# It fetches bindings directly from 'hyprctl', formats them for readability,
# and pipes the result into the 'walker' dmenu.

set -euo pipefail

#######################################
# Fetches raw keybinding data from hyprctl and performs initial cleaning.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   A stream of comma-separated keybinding data.
#######################################
fetch_and_clean_bindings() {
  hyprctl -j binds |
    jq -r '.[] | {modmask, key, keycode, description, dispatcher, arg} | "\(.modmask),\(.key)@\(.keycode),\(.description),\(.dispatcher),\(.arg)"' |
    sed -r \
      -e 's/null//' \
      -e 's,~/.local/share/hypr/bin/,,' \
      -e 's,uwsm app -- ,,' \
      -e 's/@0//' \
      -e 's/,@/,code:/' \
      -e 's/^0,/,/' \
      -e 's/^1,/SHIFT,/' \
      -e 's/^4,/CTRL,/' \
      -e 's/^5,/SHIFT CTRL,/' \
      -e 's/^8,/ALT,/' \
      -e 's/^9,/SHIFT ALT,/' \
      -e 's/^12,/CTRL ALT,/' \
      -e 's/^13,/SHIFT CTRL ALT,/' \
      -e 's/^64,/SUPER,/' \
      -e 's/^65,/SUPER SHIFT,/' \
      -e 's/^68,/SUPER CTRL,/' \
      -e 's/^69,/SUPER SHIFT CTRL,/' \
      -e 's/^72,/SUPER ALT,/' \
      -e 's/^73,/SUPER SHIFT ALT,/' \
      -e 's/^76,/SUPER CTRL ALT,/' \
      -e 's/^77,/SUPER SHIFT CTRL ALT,/'
}

#######################################
# Parses and formats the cleaned keybinding data into a human-readable format.
# Globals:
#   None
# Arguments:
#   None (reads from stdin)
# Outputs:
#   A formatted list of keybindings, ready for display.
#######################################
parse_and_format_bindings() {
  awk -F, '
  {
      # Combine the modifier and key (first two fields)
      key_combo = $1 " + " $2;

      # Clean up: strip leading "+" if present, trim spaces
      gsub(/^[ \t]*\+?[ \t]*/, "", key_combo);
      gsub(/[ \t]+$/, "", key_combo);

      # Use description, if set
      action = $3;

      if (action == "") {
          # Reconstruct the command from the remaining fields
          for (i = 4; i <= NF; i++) {
              action = action $i (i < NF ? "," : "");
          }

          # Clean up trailing commas, remove leading "exec, ", and trim
          sub(/,$/, "", action);
          gsub(/(^|,)[[:space:]]*exec[[:space:]]*,?/, "", action);
          gsub(/^[ \t]+|[ \t]+$/, "", action);
          gsub(/[ \t]+/, " ", key_combo);  # Collapse multiple spaces to one

          # Escape XML entities for display in Pango markup
          gsub(/&/, "\\&amp;", action);
          gsub(/</, "\\&lt;", action);
          gsub(/>/, "\\&gt;", action);
          gsub(/"/, "\\&quot;", action);
          gsub(/'"'"'/, "\\&apos;", action);
      }

      if (action != "") {
          printf "%-35s â†’ %s\n", key_combo, action;
      }
  }'
}

#######################################
# Main function to orchestrate the keybinding menu.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
main() {
  fetch_and_clean_bindings |
    sort -u |
    parse_and_format_bindings |
    walker --dmenu --theme hypr-default --width 960 -p 'Keybindings'
}

main
