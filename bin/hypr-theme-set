#!/bin/bash
#
# Sets a new theme for the Hyprland environment by updating configurations
# for various applications and reloading them.

set -euo pipefail

readonly THEMES_DIR="${HOME}/.config/hypr/themes"
readonly CURRENT_THEME_DIR="${HOME}/.config/hypr/current/theme"
readonly NVIM_PLUGIN_FILE="${HOME}/.config/nvim/lua/plugins/theme.lua"

#######################################
# Updates the theme for the walker application launcher.
# Globals:
#   None
# Arguments:
#   $1 - The path to the new theme's directory.
# Outputs:
#   None
#######################################
UpdateWalkerTheme() {
  local theme_path="$1"
  local walker_theme_dir="${HOME}/.config/walker/themes/hypr-default"
  local walker_theme_css="${walker_theme_dir}/style.css"
  local walker_default_css="${HOME}/.local/share/hypr/default/walker/themes/hypr-default/style.css"
  local theme_walker_css="${theme_path}/walker.css"

  if [[ ! -f "${theme_walker_css}" ]]; then
    return
  fi

  mkdir -p "${walker_theme_dir}"
  # Combine the theme's CSS with the default walker CSS.
  cat "${theme_walker_css}" >"${walker_theme_css}"
  echo "" >>"${walker_theme_css}"
  cat "${walker_default_css}" >>"${walker_theme_css}"
}

#######################################
# Updates GTK and icon themes using gsettings.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
UpdateGnomeSettings() {
  if ! command -v gsettings &>/dev/null; then
    echo "WARNING: gsettings command not found. Skipping GNOME settings update." >&2
    return
  fi

  if [[ -f "${CURRENT_THEME_DIR}/light.mode" ]]; then
    gsettings set org.gnome.desktop.interface color-scheme "prefer-light"
    gsettings set org.gnome.desktop.interface gtk-theme "Adwaita"
  else
    gsettings set org.gnome.desktop.interface color-scheme "prefer-dark"
    gsettings set org.gnome.desktop.interface gtk-theme "Adwaita-dark"
  fi

  if [[ -f "${CURRENT_THEME_DIR}/icons.theme" ]]; then
    local icon_theme
    icon_theme=$(<"${CURRENT_THEME_DIR}/icons.theme")
    gsettings set org.gnome.desktop.interface icon-theme "${icon_theme}"
  else
    gsettings set org.gnome.desktop.interface icon-theme "Adwaita"
  fi
}

#######################################
# Updates Chromium browser theme settings.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
UpdateChromiumTheme() {
  if ! command -v chromium &>/dev/null; then
    return
  fi

  local color_scheme="dark"
  if [[ -f "${CURRENT_THEME_DIR}/light.mode" ]]; then
    color_scheme="light"
  fi
  chromium --no-startup-window --set-color-scheme="${color_scheme}" &>/dev/null

  local theme_color="28,32,39" # Default neutral grey
  if [[ -f "${CURRENT_THEME_DIR}/chromium.theme" ]]; then
    theme_color=$(<"${CURRENT_THEME_DIR}/chromium.theme")
  fi
  chromium --no-startup-window --set-theme-color="${theme_color}" &>/dev/null
}

#######################################
# Updates the Neovim theme by creating a plugin file that ensures the
# theme is both loaded and activated.
# Globals:
#   NVIM_PLUGIN_FILE
# Arguments:
#   $1 - The path to the new theme's directory.
# Outputs:
#   None
#######################################
UpdateNeovimTheme() {
  # Start with a clean slate to prevent errors.
  rm -f "${NVIM_PLUGIN_FILE}"

  local theme_path="$1"
  local theme_plugin_file="${theme_path}/neovim.plugin"
  local theme_colorscheme_file="${theme_path}/neovim.colorscheme"
  local color_scheme="tokyonight" # Default fallback

  # Determine the colorscheme name
  if [[ -f "${theme_colorscheme_file}" ]]; then
    color_scheme=$(<"${theme_colorscheme_file}")
  elif [[ -f "${theme_plugin_file}" ]]; then
    # Attempt to infer colorscheme from plugin name (e.g., "rebel.nvim" -> "rebel")
    color_scheme=$(basename "${theme_plugin_file}" .plugin | sed 's/\.nvim$//')
  fi

  echo "Setting Neovim colorscheme to ${color_scheme}..."

  # Always create a file that sets the colorscheme to ensure activation.
  cat <<EOF >"${NVIM_PLUGIN_FILE}"
-- THIS FILE IS DYNAMICALLY GENERATED BY hypr-theme-set
-- DO NOT EDIT MANUALLY

return {
  -- This is a special hook that ensures the colorscheme is applied AFTER
  -- all plugins have been loaded, including the theme plugin itself.
  {
    "LazyVim/LazyVim",
    opts = {
      colorscheme = "${color_scheme}",
    },
  },
}
EOF

  # If a full plugin definition exists, append it. This allows themes to
  # define their own settings while still being activated correctly.
  if [[ -f "${theme_plugin_file}" ]]; then
    echo "Appending Neovim theme plugin from ${theme_plugin_file}..."
    # Add a comma to the previous block to make it a valid list
    sed -i '$ s/}/},/' "${NVIM_PLUGIN_FILE}"
    # Append the theme's plugin definition
    cat "${theme_plugin_file}" >>"${NVIM_PLUGIN_FILE}"
  fi
}

#######################################
# Reloads running applications to apply the new theme.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
ReloadApplications() {
  # Trigger Alacritty config reload by updating the file's timestamp.
  touch "${HOME}/.config/alacritty/alacritty.toml"

  # Reload Kitty config if it's running.
  if pgrep -x kitty &>/dev/null; then
    pkill -SIGUSR1 -x kitty
  fi

  # Reload other system components.
  pkill -SIGUSR2 btop || true # Ignore error if btop is not running
  hypr-restart-waybar
  hypr-restart-swayosd
  hypr-restart-walker
  makoctl reload
  hyprctl reload

  # Add a small delay to ensure the filesystem has time to process the
  # file changes before we tell Neovim to reload.
  sleep 0.1

  # Reload Neovim configuration in all running instances.
  if command -v nvim &>/dev/null && [ ! -z "$(nvim --serverlist)" ]; then
    for s in $(nvim --serverlist); do
      # Use --remote-silent to avoid hanging, and redirect output to prevent errors
      # from showing up if a server is stale.
      nvim --server "$s" --remote-send "<Cmd>Lazy sync<CR>" &>/dev/null || true
    done
  fi
}

#######################################
# Main function to set the theme.
# Globals:
#   THEMES_DIR
#   CURRENT_THEME_DIR
# Arguments:
#   $1 - The name of the theme to set.
# Outputs:
#   Exits with an error if the theme name is not provided or the theme does not exist.
#######################################
main() {
  if [[ -z "${1:-}" || "$1" == "CNCLD" ]]; then
    echo "Usage: hypr-theme-set <theme-name>" >&2
    exit 1
  fi

  # Sanitize the theme name: remove HTML tags, convert to lowercase, replace spaces with hyphens.
  local theme_name
  theme_name=$(echo "$1" | sed -E 's/<[^>]+>//g' | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
  local theme_path="${THEMES_DIR}/${theme_name}"

  if [[ ! -d "${theme_path}" ]]; then
    echo "Theme '${theme_name}' does not exist in ${THEMES_DIR}" >&2
    exit 2
  fi

  # Atomically switch the current theme by updating the symlink.
  ln -nsf "${theme_path}" "${CURRENT_THEME_DIR}"
  echo "Theme set to '${theme_name}'."

  UpdateWalkerTheme "${theme_path}"
  UpdateGnomeSettings
  UpdateChromiumTheme
  UpdateNeovimTheme "${theme_path}"
  ReloadApplications

  # Set a new background from the theme's collection.
  hypr-theme-bg-next
  echo "Theme applied successfully."
}

main "$@"