#!/bin/bash

# hypr-theme-set: Set a theme, specified by its name.
# Usage: hypr-theme-set <theme-name>

if [[ -z "$1" && "$1" != "CNCLD" ]]; then
  echo "Usage: hypr-theme-set <theme-name>" >&2
  exit 1
fi

THEMES_DIR="$HOME/.config/hypr/themes/"
CURRENT_THEME_DIR="$HOME/.config/hypr/current/theme"

THEME_NAME=$(echo "$1" | sed -E 's/<[^>]+>//g' | tr '[:upper:]' '[:lower:]' | tr ' ' '-')
THEME_PATH="$THEMES_DIR/$THEME_NAME"

# Check if the theme entered exists
if [[ ! -d "$THEME_PATH" ]]; then
  echo "Theme '$THEME_NAME' does not exist in $THEMES_DIR" >&2
  exit 2
fi

# Update theme symlinks
ln -nsf "$THEME_PATH" "$CURRENT_THEME_DIR"

# Set walker theme
WALKER_THEME_DIR="$HOME/.config/walker/themes/hypr-default"
WALKER_THEME_CSS="$WALKER_THEME_DIR/style.css"
WALKER_DEFAULT_THEME_CSS="$HOME/.local/share/hypr/default/walker/themes/hypr-default/style.css"
THEME_WALKER_CSS="$THEME_PATH/walker.css"

# Concatenate the theme CSS and the base CSS into the config directory
if [[ -f "$THEME_WALKER_CSS" ]]; then
  mkdir -p "$WALKER_THEME_DIR"
  cat "$THEME_WALKER_CSS" >"$WALKER_THEME_CSS"
  echo "" >>"$WALKER_THEME_CSS"
  cat "$WALKER_DEFAULT_THEME_CSS" >>"$WALKER_THEME_CSS"
fi

# Change gnome modes
if [[ -f ~/.config/hypr/current/theme/light.mode ]]; then
  gsettings set org.gnome.desktop.interface color-scheme "prefer-light"
  gsettings set org.gnome.desktop.interface gtk-theme "Adwaita"
else
  gsettings set org.gnome.desktop.interface color-scheme "prefer-dark"
  gsettings set org.gnome.desktop.interface gtk-theme "Adwaita-dark"
fi

# Change gnome icon theme color
if [[ -f ~/.config/hypr/current/theme/icons.theme ]]; then
  gsettings set org.gnome.desktop.interface icon-theme "$(<~/.config/hypr/current/theme/icons.theme)"
else
  gsettings set org.gnome.desktop.interface icon-theme "Adwaita"
fi

# Change Chromium colors
if command -v chromium &>/dev/null; then
  if [[ -f ~/.config/hypr/current/theme/light.mode ]]; then
    chromium --no-startup-window --set-color-scheme="light"
  else
    chromium --no-startup-window --set-color-scheme="dark"
  fi

  if [[ -f ~/.config/hypr/current/theme/chromium.theme ]]; then
    chromium --no-startup-window --set-theme-color="$(<~/.config/hypr/current/theme/chromium.theme)"
  else
    # Use a default, neutral grey if theme doesn't have a color
    chromium --no-startup-window --set-theme-color="28,32,39"
  fi
fi

# Set neovim colorscheme
NVIM_PLUGIN_FILE="$HOME/.config/nvim/lua/plugins/theme.lua"
THEME_NVIM_PLUGIN_FILE="$THEME_PATH/neovim.plugin"
THEME_NVIM_COLOR_FILE="$THEME_PATH/neovim.colorscheme"

# Remove any existing theme configuration
rm -f "$NVIM_PLUGIN_FILE"

if [[ -f "$THEME_NVIM_PLUGIN_FILE" ]]; then
  # Modern plugin-based theme
  echo "Installing neovim theme plugin from $THEME_NVIM_PLUGIN_FILE..."
  cp "$THEME_NVIM_PLUGIN_FILE" "$NVIM_PLUGIN_FILE"
elif [[ -f "$THEME_NVIM_COLOR_FILE" ]]; then
  # Legacy colorscheme-based theme
  COLOR_SCHEME=$(cat "$THEME_NVIM_COLOR_FILE")
  echo "Setting neovim colorscheme to $COLOR_SCHEME..."
  cat <<EOF >"$NVIM_PLUGIN_FILE"
return {
  {
    "LazyVim/LazyVim",
    opts = {
      colorscheme = "$COLOR_SCHEME",
    },
  },
}
EOF
fi

# Trigger alacritty config reload
touch "$HOME/.config/alacritty/alacritty.toml"

# Reload kitty config
if pgrep -x kitty >/dev/null; then
  pkill -SIGUSR1 -x kitty
fi

# Restart components to apply new theme
pkill -SIGUSR2 btop
hypr-restart-waybar
hypr-restart-swayosd
hypr-restart-walker
makoctl reload
hyprctl reload

# Set new background
hypr-theme-bg-next
