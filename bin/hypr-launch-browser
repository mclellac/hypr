#!/bin/bash
set -euo pipefail

# Get the default browser, with a timeout and fallback.
# xdg-settings can sometimes hang, so we wrap it in a timeout.
browser_desktop_file=$(timeout 1s xdg-settings get default-web-browser || echo "chromium.desktop")

# If the browser is still not found, exit with an error.
if [[ -z "${browser_desktop_file}" ]]; then
    echo "ERROR: Could not determine the default web browser." >&2
    exit 1
fi

# Find the full path to the desktop file.
desktop_file_path=""
for dir in "${HOME}/.local/share/applications" "${HOME}/.nix-profile/share/applications" "/usr/share/applications"; do
    if [[ -f "${dir}/${browser_desktop_file}" ]]; then
        desktop_file_path="${dir}/${browser_desktop_file}"
        break
    fi
done

# If no desktop file is found, exit with an error.
if [[ -z "${desktop_file_path}" ]]; then
    echo "ERROR: Could not find the .desktop file for '${browser_desktop_file}'." >&2
    exit 1
fi

# Read the Exec line from the desktop file.
# We remove any desktop-specific field codes like %U, %u, %F, %f.
exec_line=$(grep -E '^Exec=' "${desktop_file_path}" | head -1 | sed -e 's/^Exec=//' -e 's/ %[UufF]//g')

# If no Exec line is found, exit with an error.
if [[ -z "${exec_line}" ]]; then
    echo "ERROR: Could not find the Exec line in '${desktop_file_path}'." >&2
    exit 1
fi

# Launch the browser using uwsm. We use eval to handle potential quotes in the exec_line.
eval "exec setsid uwsm app -- ${exec_line} \"\$@\""
