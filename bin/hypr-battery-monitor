#!/bin/bash
#
# Monitors the battery level and sends a critical notification if the charge
# drops below a defined threshold while discharging. Designed to be run
# periodically by a systemd timer or cron job.

set -euo pipefail

readonly BATTERY_THRESHOLD=10
readonly NOTIFICATION_FLAG="/run/user/${UID}/hypr_battery_notified"

#######################################
# Retrieves the first battery found by upower.
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   The UPower device path for the battery, or an empty string if none is found.
#######################################
get_battery_device() {
  upower -e | grep 'BAT' | head -n 1
}

#######################################
# Fetches the current battery charge percentage.
# Globals:
#   None
# Arguments:
#   $1 - The UPower device path for the battery.
# Outputs:
#   The battery percentage as an integer, or 100 if no battery is found.
#######################################
get_battery_percentage() {
  local battery_device="$1"
  if [[ -z "${battery_device}" ]]; then
    echo "100" # Assume 100% if no battery is present
    return
  fi

  upower -i "${battery_device}" | awk -F: '/percentage/ {gsub(/[%[:space:]]/, "", $2); print $2; exit}'
}

#######################################
# Fetches the current battery state (e.g., "discharging").
# Globals:
#   None
# Arguments:
#   $1 - The UPower device path for the battery.
# Outputs:
#   The battery state, or "charging" if no battery is found.
#######################################
get_battery_state() {
  local battery_device="$1"
  if [[ -z "${battery_device}" ]]; then
    echo "charging" # Assume charging if no battery is present
    return
  fi

  upower -i "${battery_device}" | awk -F: '/state/ {gsub(/[[:space:]]/, "", $2); print $2; exit}'
}

#######################################
# Sends a critical notification about the low battery level.
# Globals:
#   None
# Arguments:
#   $1 - The current battery level.
# Outputs:
#   None
#######################################
send_notification() {
  local battery_level="$1"
  notify-send -u critical "Û±êã Time to recharge!" "Battery is down to ${battery_level}%" -i battery-caution -t 30000
}

#######################################
# Main function to check battery status and send notifications.
# Globals:
#   BATTERY_THRESHOLD
#   NOTIFICATION_FLAG
# Arguments:
#   None
# Outputs:
#   None
#######################################
main() {
  local battery_device
  battery_device=$(get_battery_device)

  # If no battery is found, there's nothing to do.
  if [[ -z "${battery_device}" ]]; then
    exit 0
  fi

  local battery_level
  battery_level=$(get_battery_percentage "${battery_device}")
  local battery_state
  battery_state=$(get_battery_state "${battery_device}")

  if [[ "${battery_state}" == "discharging" && "${battery_level}" -le "${BATTERY_THRESHOLD}" ]]; then
    # Send notification only once per discharge cycle.
    if [[ ! -f "${NOTIFICATION_FLAG}" ]]; then
      send_notification "${battery_level}"
      touch "${NOTIFICATION_FLAG}"
    fi
  else
    # Remove the flag if the battery is charging or above the threshold.
    rm -f "${NOTIFICATION_FLAG}"
  fi
}

main
